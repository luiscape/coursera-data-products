fit <- ets(sub$Total)
library(forecast)
fit <- ets(sub$Total)
fit <- ets(a)
forecast(fit, 10)
a
a <- ts(data$Value, start=as.Date("2014-03-12"), frequency=365)
fit <- ets(a)
forecast(fit, 10)
fit <- ets(data$Value)
forecast(fit, 10)
forecast(fit, 1)
plot(forecast(fit, 1))
order(data$Value)
fit <- ets(order(data$Value))
plot(forecast(fit, 1))
?order
fit <- ets(order(data$Value, decreasing = TRUE))
plot(forecast(fit, 1))
plot(forecast(fit, 100))
order(data$Value, decreasing = TRUE)
fit <- ets(data[order(data$Value, decreasing = TRUE),]$Value)
plot(forecast(fit, 100))
fit <- ets(data[order(data$Value, decreasing = FALSE),]$Value)
plot(forecast(fit, 100))
abline(h=1,col=4,lty=2)
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
nrow(data)
forecast(fit, 200)
data <- data[order(data$Value),]
View(data)
data <- data[order(data$Value, decreasing = TRUE),]
View(data)
current_requirements = 2270000000
funding = 1300621500
funding / current_requirements
input = 200000
r = (input + funding) / current_requirements
r
input = 2000000
r = (input + funding) / current_requirements
r
input = 20000000
r = (input + funding) / current_requirements
r
input = 2000000000
r = (input + funding) / current_requirements
r
r = (input + funding) / current_requirements
r
input = 20000000
r = (input + funding) / current_requirements
r
names(data)
head(data)
Sys.time()
sys.Date()
sys.date()
Sys.date()
??sys.date
Date = as.character(as.Date(Sys.time)))
as.Date(Sys.time)
as.Date(Sys.Dime)
as.Date(Sys.Date)
Sys.Date
Sys.Date()
names(dta)
names(data)
head(data)
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Time()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
return(it)
}
x <- calculateDonaton(input)
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
return(it)
}
x <- calculateDonaton(input)
View(x)
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
x <- calculateDonaton(input)
View(x)
fit <- ets(x$Value)
plot(forecast(fit, 200))
fit <- ets(x[order(x$Value),]$Value)
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
y <-forecast(fit, 200)
View(y)
f <- forecast(fit, 200)
head(f$"Point Forecast")
names(f)
f <- forecast(fit, 200)
View(f)
f <- data.frame(forecast(fit, 200))
View(f)
names(f)
head(f$Point.Forecast)
library(dplyr)
names(f)
x <- f %>%
Point.Forecast > 1
x <- f %>%
subset(Point.Forecast > 1)
x
x[278]
row.names(x[1])
row.names(x[,1])
row.names(x[1,])
View(f)
as.numeric(row.names(x[1,])) -148
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the Ebola response is fully funded.")
print(m)
return(days)
}
tdata <- calculateDonaton(data)
days <- calculateDays(tdata)
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
input = 30000000
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast <- function() {
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
plotForecast()
plotForecast()
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 20000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function() {
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast()
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 200000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function() {
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast()
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 2000000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function() {
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast()
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 20000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 100000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 900000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 900000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 170))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
plotForecast(tdata)
# Reading the data from a local path.
data <- read.csv("data/fts-ebola-coverage.csv")
data <- data[order(data$Value, decreasing = TRUE),]
input = 500000000
calculateDonaton <- function(i) {
current_requirements = 2270000000
funding = 1300621500
r = (input + funding) / current_requirements
it <- data.frame(CHD_Indicator_Code = "CHD.FUN.142",
Date = as.character(Sys.Date()),
Value = r,
Indicator_Name = "Ebola Virus Outbreak - Overview of Needs and Requirements (inter-agency plan for Guinea, Liberia, Sierra Leone, Region) (Coverage)")
new_data <- rbind(data,it)
new_data <- new_data[order(new_data$Value, decreasing = TRUE),]
return(new_data)
}
calculateDays <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 200))
x <- f %>%
subset(Point.Forecast > 1)
# Calculating how many days will be left.
days  <- as.numeric(row.names(x[1,])) - 148
m = paste("At that rate,", days, "about days will be necessary before the UN Ebola response is fully funded.")
print(m)
return(days)
}
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 170))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 170))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
main("Forecast for donation coverage of UN's Ebola response.")
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 170))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
title( main = "Forecast for donation coverage of UN's Ebola response." )
}
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 170))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
title(xlab = "Coverage ratio.", ylab = "Number of appeal days.")
}
title = "Forecast for donation coverage of UN's Ebola response."
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
plotForecast <- function(df) {
fit <- ets(df[order(df$Value),]$Value)
f <- data.frame(forecast(fit, 170))
plot(forecast(fit, 200))
abline(h=1,col=4,lty=2)
title(ylab = "Number of appeal days", xlab = "Coverage ratio")
}
title = "Forecast for donation coverage of UN's Ebola response."
tdata <- calculateDonaton(input)
days <- calculateDays(tdata)
plotForecast(tdata)
shiny::runApp()
shiny::runApp()
2270000000 - 1300621500
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
install.packages("shinyapps")
install.packages("installr"); require(installr)
